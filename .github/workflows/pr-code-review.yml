name: ü§ñ PR Code Structure Review

# Se ejecuta cuando se crea o actualiza un PR
on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_target:
    types: [opened, synchronize, reopened]

jobs:
  code-review:
    name: Analyze Code Structure
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write  # Necesario para comentar en PRs
      
    steps:
      # 1. Checkout del c√≥digo del PR
      - name: üì• Checkout PR code
        uses: actions/checkout@v4
        with:
          # Usar el c√≥digo del PR, no del main
          ref: ${{ github.event.pull_request.head.sha }}
          
      # 2. Setup Node.js
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      # 3. Instalar dependencias del revisor
      - name: üì¶ Install reviewer dependencies
        run: |
          # Crear directorio temporal para el revisor
          mkdir -p /tmp/pr-reviewer
          cd /tmp/pr-reviewer
          
          # Copiar archivos del revisor desde el repo
          cp -r ${{ github.workspace }}/src ./
          cp -r ${{ github.workspace }}/rules ./
          cp ${{ github.workspace }}/package.json ./
          
          # Instalar dependencias
          npm install --production
          
      # 4. Ejecutar an√°lisis
      - name: üîç Run Code Analysis
        id: analysis
        run: |
          cd /tmp/pr-reviewer
          
          # Ejecutar el analizador en el c√≥digo del PR
          node -e "
          const CodeReviewer = require('./src/code-reviewer');
          
          async function analyze() {
            try {
              const reviewer = new CodeReviewer();
              const results = await reviewer.analyzeProject('${{ github.workspace }}');
              const report = reviewer.generateReport(results);
              
              // Guardar reporte para el siguiente step
              require('fs').writeFileSync('/tmp/analysis-report.md', report);
              
              // Mostrar resumen en logs
              console.log('Analysis completed!');
              console.log('Summary:', results.summary);
              
              // Exportar variables para GitHub Actions
              console.log('::set-output name=passed::' + results.summary.passed);
              console.log('::set-output name=failed::' + results.summary.failed);
              console.log('::set-output name=warnings::' + results.summary.warnings);
              
            } catch (error) {
              console.error('Analysis failed:', error.message);
              process.exit(1);
            }
          }
          
          analyze();
          "
          
      # 5. Comentar en el PR
      - name: üí¨ Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Leer el reporte generado
            const report = fs.readFileSync('/tmp/analysis-report.md', 'utf8');
            
            // Buscar comentarios existentes del bot
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ü§ñ **Code Structure Review**')
            );
            
            const commentBody = `${report}

            ---
            ü§ñ *Automated review by [PR Code Reviewer](${context.payload.repository.html_url})*
            üìä Analysis completed at: ${new Date().toISOString()}
            üîÑ Commit: \`${context.sha.substring(0, 7)}\``;
            
            if (botComment) {
              // Actualizar comentario existente
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
              console.log('‚úÖ Updated existing comment');
            } else {
              // Crear nuevo comentario
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
              console.log('‚úÖ Created new comment');
            }
            
      # 6. Marcar como fallido si hay errores cr√≠ticos
      - name: ‚ùå Fail if critical issues found
        if: steps.analysis.outputs.failed > 0
        run: |
          echo "::warning::Found ${{ steps.analysis.outputs.failed }} critical issues"
          echo "::warning::Found ${{ steps.analysis.outputs.warnings }} warnings" 
          # Opcional: Fallar el job si hay errores cr√≠ticos
          # exit 1